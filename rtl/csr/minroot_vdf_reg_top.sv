// Copyright Supranational LLC
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Register Top module auto-generated by `reggen`


module minroot_vdf_reg_top
  import ahb_pkg::*;
  #(
    parameter type haddr_t   = logic [31:0],
    parameter type hdata_t   = logic [31:0],
    parameter bit  FLOP_RESP = 1
    )
  (
   // To HW
   output minroot_vdf_reg_pkg::minroot_vdf_reg2hw_t reg2hw, // Write
   input  minroot_vdf_reg_pkg::minroot_vdf_hw2reg_t hw2reg, // Read
   // Bus
   input  logic    clk_i,
   input  logic    rst_ni,
   input  logic    hsel_i,
   input  haddr_t  haddr_i,
   input  htrans_e htrans_i,
   input  hburst_e hburst_i,
   input  hsize_t  hsize_i,
   input  hprot_t  hprot_i,
   input  logic    hmastlock_i,
   input  logic    hwrite_i,
   input  hdata_t  hwdata_i,
   output hdata_t  hrdata_o,
   output hresp_e  hresp_o,
   output logic    hready_o
);

  import minroot_vdf_reg_pkg::* ;

  localparam int AW = 22;

  // register signals
  logic          reg_we;
  logic          reg_re;
  haddr_t        reg_addr;
  logic          reg_write;
  logic          reg_valid;
  hdata_t        reg_wdata;
  hdata_t        reg_rdata;
  logic          reg_ready;
  logic          reg_error;

  logic          addrmiss;

  hdata_t reg_rdata_next;
  logic reg_busy;

  ahb_sub_csr
      #(
        .haddr_t(haddr_t),
        .hdata_t(hdata_t),
        .FLOP_RESP(1)
        ) _sub_csr
        (
         .hclk_i(clk_i),
         .hreset_ni(rst_ni),
         .hsel_i,
         .haddr_i,
         .htrans_i,
         .hburst_i,
         .hsize_i,
         .hprot_i,
         .hmastlock_i,
         .hwrite_i,
         .hwdata_i,
         .hrdata_o,
         .hresp_o,
         .hready_o,
         .sub_addr_o(reg_addr),
         .sub_write_o(reg_write),
         .sub_valid_o(reg_valid),
         .sub_wdata_o(reg_wdata),
         .sub_rdata_i(reg_rdata),
         .sub_ready_i(reg_ready)
         );

  // cdc oversampling signals

  assign reg_ready = !reg_busy;
  assign reg_we    = reg_valid && reg_ready && reg_write;
  assign reg_re    = reg_valid && reg_ready && !reg_write;
  assign reg_rdata = reg_rdata_next ;
  assign reg_error = 1'b0;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic control_we;
  logic control_clk_enable_qs;
  logic control_clk_enable_wd;
  logic control_reset_qs;
  logic control_reset_wd;
  logic cmd_job_id_we;
  logic [31:0] cmd_job_id_qs;
  logic [31:0] cmd_job_id_wd;
  logic cmd_iter_count_0_we;
  logic [31:0] cmd_iter_count_0_qs;
  logic [31:0] cmd_iter_count_0_wd;
  logic cmd_iter_count_1_we;
  logic [31:0] cmd_iter_count_1_qs;
  logic [31:0] cmd_iter_count_1_wd;
  logic cmd_start_iter_0_we;
  logic [31:0] cmd_start_iter_0_qs;
  logic [31:0] cmd_start_iter_0_wd;
  logic cmd_start_iter_1_we;
  logic [31:0] cmd_start_iter_1_qs;
  logic [31:0] cmd_start_iter_1_wd;
  logic cmd_x_0_we;
  logic [31:0] cmd_x_0_qs;
  logic [31:0] cmd_x_0_wd;
  logic cmd_x_1_we;
  logic [31:0] cmd_x_1_qs;
  logic [31:0] cmd_x_1_wd;
  logic cmd_x_2_we;
  logic [31:0] cmd_x_2_qs;
  logic [31:0] cmd_x_2_wd;
  logic cmd_x_3_we;
  logic [31:0] cmd_x_3_qs;
  logic [31:0] cmd_x_3_wd;
  logic cmd_x_4_we;
  logic [31:0] cmd_x_4_qs;
  logic [31:0] cmd_x_4_wd;
  logic cmd_x_5_we;
  logic [31:0] cmd_x_5_qs;
  logic [31:0] cmd_x_5_wd;
  logic cmd_x_6_we;
  logic [31:0] cmd_x_6_qs;
  logic [31:0] cmd_x_6_wd;
  logic cmd_x_7_we;
  logic [31:0] cmd_x_7_qs;
  logic [31:0] cmd_x_7_wd;
  logic cmd_x_8_we;
  logic [31:0] cmd_x_8_qs;
  logic [31:0] cmd_x_8_wd;
  logic cmd_x_9_we;
  logic [31:0] cmd_x_9_qs;
  logic [31:0] cmd_x_9_wd;
  logic cmd_y_0_we;
  logic [31:0] cmd_y_0_qs;
  logic [31:0] cmd_y_0_wd;
  logic cmd_y_1_we;
  logic [31:0] cmd_y_1_qs;
  logic [31:0] cmd_y_1_wd;
  logic cmd_y_2_we;
  logic [31:0] cmd_y_2_qs;
  logic [31:0] cmd_y_2_wd;
  logic cmd_y_3_we;
  logic [31:0] cmd_y_3_qs;
  logic [31:0] cmd_y_3_wd;
  logic cmd_y_4_we;
  logic [31:0] cmd_y_4_qs;
  logic [31:0] cmd_y_4_wd;
  logic cmd_y_5_we;
  logic [31:0] cmd_y_5_qs;
  logic [31:0] cmd_y_5_wd;
  logic cmd_y_6_we;
  logic [31:0] cmd_y_6_qs;
  logic [31:0] cmd_y_6_wd;
  logic cmd_y_7_we;
  logic [31:0] cmd_y_7_qs;
  logic [31:0] cmd_y_7_wd;
  logic cmd_y_8_we;
  logic [31:0] cmd_y_8_qs;
  logic [31:0] cmd_y_8_wd;
  logic cmd_y_9_we;
  logic [31:0] cmd_y_9_qs;
  logic [31:0] cmd_y_9_wd;
  logic cmd_start_we;
  logic cmd_start_wd;
  logic status_job_id_re;
  logic [31:0] status_job_id_qs;
  logic status_iter_0_re;
  logic [31:0] status_iter_0_qs;
  logic status_iter_1_re;
  logic [31:0] status_iter_1_qs;
  logic status_x_0_re;
  logic [31:0] status_x_0_qs;
  logic status_x_1_re;
  logic [31:0] status_x_1_qs;
  logic status_x_2_re;
  logic [31:0] status_x_2_qs;
  logic status_x_3_re;
  logic [31:0] status_x_3_qs;
  logic status_x_4_re;
  logic [31:0] status_x_4_qs;
  logic status_x_5_re;
  logic [31:0] status_x_5_qs;
  logic status_x_6_re;
  logic [31:0] status_x_6_qs;
  logic status_x_7_re;
  logic [31:0] status_x_7_qs;
  logic status_x_8_re;
  logic [31:0] status_x_8_qs;
  logic status_x_9_re;
  logic [31:0] status_x_9_qs;
  logic status_y_0_re;
  logic [31:0] status_y_0_qs;
  logic status_y_1_re;
  logic [31:0] status_y_1_qs;
  logic status_y_2_re;
  logic [31:0] status_y_2_qs;
  logic status_y_3_re;
  logic [31:0] status_y_3_qs;
  logic status_y_4_re;
  logic [31:0] status_y_4_qs;
  logic status_y_5_re;
  logic [31:0] status_y_5_qs;
  logic status_y_6_re;
  logic [31:0] status_y_6_qs;
  logic status_y_7_re;
  logic [31:0] status_y_7_qs;
  logic status_y_8_re;
  logic [31:0] status_y_8_qs;
  logic status_y_9_re;
  logic [31:0] status_y_9_qs;
  logic status_end_re;
  logic status_end_qs;
  logic rw_we;
  logic [31:0] rw_qs;
  logic [31:0] rw_wd;
  logic end_of_range_we;
  logic end_of_range_wd;

  // Register instances
  // R[control]: V(False)
  //   F[clk_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_control_clk_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_clk_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.clk_enable.q),

    // to register interface (read)
    .qs     (control_clk_enable_qs)
  );

  //   F[reset]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_control_reset (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_reset_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.reset.q),

    // to register interface (read)
    .qs     (control_reset_qs)
  );


  // R[cmd_job_id]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_job_id (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_job_id_we),
    .wd     (cmd_job_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_job_id.q),

    // to register interface (read)
    .qs     (cmd_job_id_qs)
  );


  // Subregister 0 of Multireg cmd_iter_count
  // R[cmd_iter_count_0]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_iter_count_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_iter_count_0_we),
    .wd     (cmd_iter_count_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_iter_count[0].q),

    // to register interface (read)
    .qs     (cmd_iter_count_0_qs)
  );


  // Subregister 1 of Multireg cmd_iter_count
  // R[cmd_iter_count_1]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_iter_count_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_iter_count_1_we),
    .wd     (cmd_iter_count_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_iter_count[1].q),

    // to register interface (read)
    .qs     (cmd_iter_count_1_qs)
  );


  // Subregister 0 of Multireg cmd_start_iter
  // R[cmd_start_iter_0]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_start_iter_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_start_iter_0_we),
    .wd     (cmd_start_iter_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_start_iter[0].q),

    // to register interface (read)
    .qs     (cmd_start_iter_0_qs)
  );


  // Subregister 1 of Multireg cmd_start_iter
  // R[cmd_start_iter_1]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_start_iter_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_start_iter_1_we),
    .wd     (cmd_start_iter_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_start_iter[1].q),

    // to register interface (read)
    .qs     (cmd_start_iter_1_qs)
  );


  // Subregister 0 of Multireg cmd_x
  // R[cmd_x_0]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_x_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_x_0_we),
    .wd     (cmd_x_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_x[0].q),

    // to register interface (read)
    .qs     (cmd_x_0_qs)
  );


  // Subregister 1 of Multireg cmd_x
  // R[cmd_x_1]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_x_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_x_1_we),
    .wd     (cmd_x_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_x[1].q),

    // to register interface (read)
    .qs     (cmd_x_1_qs)
  );


  // Subregister 2 of Multireg cmd_x
  // R[cmd_x_2]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_x_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_x_2_we),
    .wd     (cmd_x_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_x[2].q),

    // to register interface (read)
    .qs     (cmd_x_2_qs)
  );


  // Subregister 3 of Multireg cmd_x
  // R[cmd_x_3]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_x_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_x_3_we),
    .wd     (cmd_x_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_x[3].q),

    // to register interface (read)
    .qs     (cmd_x_3_qs)
  );


  // Subregister 4 of Multireg cmd_x
  // R[cmd_x_4]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_x_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_x_4_we),
    .wd     (cmd_x_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_x[4].q),

    // to register interface (read)
    .qs     (cmd_x_4_qs)
  );


  // Subregister 5 of Multireg cmd_x
  // R[cmd_x_5]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_x_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_x_5_we),
    .wd     (cmd_x_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_x[5].q),

    // to register interface (read)
    .qs     (cmd_x_5_qs)
  );


  // Subregister 6 of Multireg cmd_x
  // R[cmd_x_6]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_x_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_x_6_we),
    .wd     (cmd_x_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_x[6].q),

    // to register interface (read)
    .qs     (cmd_x_6_qs)
  );


  // Subregister 7 of Multireg cmd_x
  // R[cmd_x_7]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_x_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_x_7_we),
    .wd     (cmd_x_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_x[7].q),

    // to register interface (read)
    .qs     (cmd_x_7_qs)
  );


  // Subregister 8 of Multireg cmd_x
  // R[cmd_x_8]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_x_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_x_8_we),
    .wd     (cmd_x_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_x[8].q),

    // to register interface (read)
    .qs     (cmd_x_8_qs)
  );


  // Subregister 9 of Multireg cmd_x
  // R[cmd_x_9]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_x_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_x_9_we),
    .wd     (cmd_x_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_x[9].q),

    // to register interface (read)
    .qs     (cmd_x_9_qs)
  );


  // Subregister 0 of Multireg cmd_y
  // R[cmd_y_0]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_y_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_y_0_we),
    .wd     (cmd_y_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_y[0].q),

    // to register interface (read)
    .qs     (cmd_y_0_qs)
  );


  // Subregister 1 of Multireg cmd_y
  // R[cmd_y_1]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_y_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_y_1_we),
    .wd     (cmd_y_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_y[1].q),

    // to register interface (read)
    .qs     (cmd_y_1_qs)
  );


  // Subregister 2 of Multireg cmd_y
  // R[cmd_y_2]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_y_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_y_2_we),
    .wd     (cmd_y_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_y[2].q),

    // to register interface (read)
    .qs     (cmd_y_2_qs)
  );


  // Subregister 3 of Multireg cmd_y
  // R[cmd_y_3]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_y_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_y_3_we),
    .wd     (cmd_y_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_y[3].q),

    // to register interface (read)
    .qs     (cmd_y_3_qs)
  );


  // Subregister 4 of Multireg cmd_y
  // R[cmd_y_4]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_y_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_y_4_we),
    .wd     (cmd_y_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_y[4].q),

    // to register interface (read)
    .qs     (cmd_y_4_qs)
  );


  // Subregister 5 of Multireg cmd_y
  // R[cmd_y_5]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_y_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_y_5_we),
    .wd     (cmd_y_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_y[5].q),

    // to register interface (read)
    .qs     (cmd_y_5_qs)
  );


  // Subregister 6 of Multireg cmd_y
  // R[cmd_y_6]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_y_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_y_6_we),
    .wd     (cmd_y_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_y[6].q),

    // to register interface (read)
    .qs     (cmd_y_6_qs)
  );


  // Subregister 7 of Multireg cmd_y
  // R[cmd_y_7]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_y_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_y_7_we),
    .wd     (cmd_y_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_y[7].q),

    // to register interface (read)
    .qs     (cmd_y_7_qs)
  );


  // Subregister 8 of Multireg cmd_y
  // R[cmd_y_8]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_y_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_y_8_we),
    .wd     (cmd_y_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_y[8].q),

    // to register interface (read)
    .qs     (cmd_y_8_qs)
  );


  // Subregister 9 of Multireg cmd_y
  // R[cmd_y_9]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_cmd_y_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (cmd_y_9_we),
    .wd     (cmd_y_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cmd_y[9].q),

    // to register interface (read)
    .qs     (cmd_y_9_qs)
  );


  // R[cmd_start]: V(True)
  prim_subreg_ext #(
    .DW    (1)
  ) u_cmd_start (
    .re     (1'b0),
    .we     (cmd_start_we),
    .wd     (cmd_start_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cmd_start.qe),
    .q      (reg2hw.cmd_start.q),
    .qs     ()
  );


  // R[status_job_id]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_job_id (
    .re     (status_job_id_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_job_id.d),
    .qre    (reg2hw.status_job_id.re),
    .qe     (reg2hw.status_job_id.qe),
    .q      (reg2hw.status_job_id.q),
    .qs     (status_job_id_qs)
  );


  // Subregister 0 of Multireg status_iter
  // R[status_iter_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_iter_0 (
    .re     (status_iter_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_iter[0].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_iter[0].q),
    .qs     (status_iter_0_qs)
  );


  // Subregister 1 of Multireg status_iter
  // R[status_iter_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_iter_1 (
    .re     (status_iter_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_iter[1].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_iter[1].q),
    .qs     (status_iter_1_qs)
  );


  // Subregister 0 of Multireg status_x
  // R[status_x_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_x_0 (
    .re     (status_x_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_x[0].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_x[0].q),
    .qs     (status_x_0_qs)
  );


  // Subregister 1 of Multireg status_x
  // R[status_x_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_x_1 (
    .re     (status_x_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_x[1].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_x[1].q),
    .qs     (status_x_1_qs)
  );


  // Subregister 2 of Multireg status_x
  // R[status_x_2]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_x_2 (
    .re     (status_x_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_x[2].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_x[2].q),
    .qs     (status_x_2_qs)
  );


  // Subregister 3 of Multireg status_x
  // R[status_x_3]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_x_3 (
    .re     (status_x_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_x[3].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_x[3].q),
    .qs     (status_x_3_qs)
  );


  // Subregister 4 of Multireg status_x
  // R[status_x_4]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_x_4 (
    .re     (status_x_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_x[4].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_x[4].q),
    .qs     (status_x_4_qs)
  );


  // Subregister 5 of Multireg status_x
  // R[status_x_5]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_x_5 (
    .re     (status_x_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_x[5].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_x[5].q),
    .qs     (status_x_5_qs)
  );


  // Subregister 6 of Multireg status_x
  // R[status_x_6]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_x_6 (
    .re     (status_x_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_x[6].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_x[6].q),
    .qs     (status_x_6_qs)
  );


  // Subregister 7 of Multireg status_x
  // R[status_x_7]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_x_7 (
    .re     (status_x_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_x[7].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_x[7].q),
    .qs     (status_x_7_qs)
  );


  // Subregister 8 of Multireg status_x
  // R[status_x_8]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_x_8 (
    .re     (status_x_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_x[8].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_x[8].q),
    .qs     (status_x_8_qs)
  );


  // Subregister 9 of Multireg status_x
  // R[status_x_9]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_x_9 (
    .re     (status_x_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_x[9].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_x[9].q),
    .qs     (status_x_9_qs)
  );


  // Subregister 0 of Multireg status_y
  // R[status_y_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_y_0 (
    .re     (status_y_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_y[0].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_y[0].q),
    .qs     (status_y_0_qs)
  );


  // Subregister 1 of Multireg status_y
  // R[status_y_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_y_1 (
    .re     (status_y_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_y[1].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_y[1].q),
    .qs     (status_y_1_qs)
  );


  // Subregister 2 of Multireg status_y
  // R[status_y_2]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_y_2 (
    .re     (status_y_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_y[2].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_y[2].q),
    .qs     (status_y_2_qs)
  );


  // Subregister 3 of Multireg status_y
  // R[status_y_3]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_y_3 (
    .re     (status_y_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_y[3].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_y[3].q),
    .qs     (status_y_3_qs)
  );


  // Subregister 4 of Multireg status_y
  // R[status_y_4]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_y_4 (
    .re     (status_y_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_y[4].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_y[4].q),
    .qs     (status_y_4_qs)
  );


  // Subregister 5 of Multireg status_y
  // R[status_y_5]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_y_5 (
    .re     (status_y_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_y[5].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_y[5].q),
    .qs     (status_y_5_qs)
  );


  // Subregister 6 of Multireg status_y
  // R[status_y_6]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_y_6 (
    .re     (status_y_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_y[6].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_y[6].q),
    .qs     (status_y_6_qs)
  );


  // Subregister 7 of Multireg status_y
  // R[status_y_7]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_y_7 (
    .re     (status_y_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_y[7].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_y[7].q),
    .qs     (status_y_7_qs)
  );


  // Subregister 8 of Multireg status_y
  // R[status_y_8]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_y_8 (
    .re     (status_y_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_y[8].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_y[8].q),
    .qs     (status_y_8_qs)
  );


  // Subregister 9 of Multireg status_y
  // R[status_y_9]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_status_y_9 (
    .re     (status_y_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_y[9].d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.status_y[9].q),
    .qs     (status_y_9_qs)
  );


  // R[status_end]: V(True)
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_end (
    .re     (status_end_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status_end.d),
    .qre    (reg2hw.status_end.re),
    .qe     (reg2hw.status_end.qe),
    .q      (reg2hw.status_end.q),
    .qs     (status_end_qs)
  );


  // R[rw]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h00000000)
  ) u_rw (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rw_we),
    .wd     (rw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rw.q),

    // to register interface (read)
    .qs     (rw_qs)
  );


  // R[end_of_range]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessWO),
    .RESVAL  (1'h0)
  ) u_end_of_range (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (end_of_range_we),
    .wd     (end_of_range_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     ()
  );



  logic [52:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == MINROOT_VDF_CONTROL_OFFSET);
    addr_hit[ 1] = (reg_addr == MINROOT_VDF_CMD_JOB_ID_OFFSET);
    addr_hit[ 2] = (reg_addr == MINROOT_VDF_CMD_ITER_COUNT_0_OFFSET);
    addr_hit[ 3] = (reg_addr == MINROOT_VDF_CMD_ITER_COUNT_1_OFFSET);
    addr_hit[ 4] = (reg_addr == MINROOT_VDF_CMD_START_ITER_0_OFFSET);
    addr_hit[ 5] = (reg_addr == MINROOT_VDF_CMD_START_ITER_1_OFFSET);
    addr_hit[ 6] = (reg_addr == MINROOT_VDF_CMD_X_0_OFFSET);
    addr_hit[ 7] = (reg_addr == MINROOT_VDF_CMD_X_1_OFFSET);
    addr_hit[ 8] = (reg_addr == MINROOT_VDF_CMD_X_2_OFFSET);
    addr_hit[ 9] = (reg_addr == MINROOT_VDF_CMD_X_3_OFFSET);
    addr_hit[10] = (reg_addr == MINROOT_VDF_CMD_X_4_OFFSET);
    addr_hit[11] = (reg_addr == MINROOT_VDF_CMD_X_5_OFFSET);
    addr_hit[12] = (reg_addr == MINROOT_VDF_CMD_X_6_OFFSET);
    addr_hit[13] = (reg_addr == MINROOT_VDF_CMD_X_7_OFFSET);
    addr_hit[14] = (reg_addr == MINROOT_VDF_CMD_X_8_OFFSET);
    addr_hit[15] = (reg_addr == MINROOT_VDF_CMD_X_9_OFFSET);
    addr_hit[16] = (reg_addr == MINROOT_VDF_CMD_Y_0_OFFSET);
    addr_hit[17] = (reg_addr == MINROOT_VDF_CMD_Y_1_OFFSET);
    addr_hit[18] = (reg_addr == MINROOT_VDF_CMD_Y_2_OFFSET);
    addr_hit[19] = (reg_addr == MINROOT_VDF_CMD_Y_3_OFFSET);
    addr_hit[20] = (reg_addr == MINROOT_VDF_CMD_Y_4_OFFSET);
    addr_hit[21] = (reg_addr == MINROOT_VDF_CMD_Y_5_OFFSET);
    addr_hit[22] = (reg_addr == MINROOT_VDF_CMD_Y_6_OFFSET);
    addr_hit[23] = (reg_addr == MINROOT_VDF_CMD_Y_7_OFFSET);
    addr_hit[24] = (reg_addr == MINROOT_VDF_CMD_Y_8_OFFSET);
    addr_hit[25] = (reg_addr == MINROOT_VDF_CMD_Y_9_OFFSET);
    addr_hit[26] = (reg_addr == MINROOT_VDF_CMD_START_OFFSET);
    addr_hit[27] = (reg_addr == MINROOT_VDF_STATUS_JOB_ID_OFFSET);
    addr_hit[28] = (reg_addr == MINROOT_VDF_STATUS_ITER_0_OFFSET);
    addr_hit[29] = (reg_addr == MINROOT_VDF_STATUS_ITER_1_OFFSET);
    addr_hit[30] = (reg_addr == MINROOT_VDF_STATUS_X_0_OFFSET);
    addr_hit[31] = (reg_addr == MINROOT_VDF_STATUS_X_1_OFFSET);
    addr_hit[32] = (reg_addr == MINROOT_VDF_STATUS_X_2_OFFSET);
    addr_hit[33] = (reg_addr == MINROOT_VDF_STATUS_X_3_OFFSET);
    addr_hit[34] = (reg_addr == MINROOT_VDF_STATUS_X_4_OFFSET);
    addr_hit[35] = (reg_addr == MINROOT_VDF_STATUS_X_5_OFFSET);
    addr_hit[36] = (reg_addr == MINROOT_VDF_STATUS_X_6_OFFSET);
    addr_hit[37] = (reg_addr == MINROOT_VDF_STATUS_X_7_OFFSET);
    addr_hit[38] = (reg_addr == MINROOT_VDF_STATUS_X_8_OFFSET);
    addr_hit[39] = (reg_addr == MINROOT_VDF_STATUS_X_9_OFFSET);
    addr_hit[40] = (reg_addr == MINROOT_VDF_STATUS_Y_0_OFFSET);
    addr_hit[41] = (reg_addr == MINROOT_VDF_STATUS_Y_1_OFFSET);
    addr_hit[42] = (reg_addr == MINROOT_VDF_STATUS_Y_2_OFFSET);
    addr_hit[43] = (reg_addr == MINROOT_VDF_STATUS_Y_3_OFFSET);
    addr_hit[44] = (reg_addr == MINROOT_VDF_STATUS_Y_4_OFFSET);
    addr_hit[45] = (reg_addr == MINROOT_VDF_STATUS_Y_5_OFFSET);
    addr_hit[46] = (reg_addr == MINROOT_VDF_STATUS_Y_6_OFFSET);
    addr_hit[47] = (reg_addr == MINROOT_VDF_STATUS_Y_7_OFFSET);
    addr_hit[48] = (reg_addr == MINROOT_VDF_STATUS_Y_8_OFFSET);
    addr_hit[49] = (reg_addr == MINROOT_VDF_STATUS_Y_9_OFFSET);
    addr_hit[50] = (reg_addr == MINROOT_VDF_STATUS_END_OFFSET);
    addr_hit[51] = (reg_addr == MINROOT_VDF_RW_OFFSET);
    addr_hit[52] = (reg_addr == MINROOT_VDF_END_OF_RANGE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  assign control_we = addr_hit[0] & reg_we & !reg_error;

  assign control_clk_enable_wd = reg_wdata[0];

  assign control_reset_wd = reg_wdata[4];
  assign cmd_job_id_we = addr_hit[1] & reg_we & !reg_error;

  assign cmd_job_id_wd = reg_wdata[31:0];
  assign cmd_iter_count_0_we = addr_hit[2] & reg_we & !reg_error;

  assign cmd_iter_count_0_wd = reg_wdata[31:0];
  assign cmd_iter_count_1_we = addr_hit[3] & reg_we & !reg_error;

  assign cmd_iter_count_1_wd = reg_wdata[31:0];
  assign cmd_start_iter_0_we = addr_hit[4] & reg_we & !reg_error;

  assign cmd_start_iter_0_wd = reg_wdata[31:0];
  assign cmd_start_iter_1_we = addr_hit[5] & reg_we & !reg_error;

  assign cmd_start_iter_1_wd = reg_wdata[31:0];
  assign cmd_x_0_we = addr_hit[6] & reg_we & !reg_error;

  assign cmd_x_0_wd = reg_wdata[31:0];
  assign cmd_x_1_we = addr_hit[7] & reg_we & !reg_error;

  assign cmd_x_1_wd = reg_wdata[31:0];
  assign cmd_x_2_we = addr_hit[8] & reg_we & !reg_error;

  assign cmd_x_2_wd = reg_wdata[31:0];
  assign cmd_x_3_we = addr_hit[9] & reg_we & !reg_error;

  assign cmd_x_3_wd = reg_wdata[31:0];
  assign cmd_x_4_we = addr_hit[10] & reg_we & !reg_error;

  assign cmd_x_4_wd = reg_wdata[31:0];
  assign cmd_x_5_we = addr_hit[11] & reg_we & !reg_error;

  assign cmd_x_5_wd = reg_wdata[31:0];
  assign cmd_x_6_we = addr_hit[12] & reg_we & !reg_error;

  assign cmd_x_6_wd = reg_wdata[31:0];
  assign cmd_x_7_we = addr_hit[13] & reg_we & !reg_error;

  assign cmd_x_7_wd = reg_wdata[31:0];
  assign cmd_x_8_we = addr_hit[14] & reg_we & !reg_error;

  assign cmd_x_8_wd = reg_wdata[31:0];
  assign cmd_x_9_we = addr_hit[15] & reg_we & !reg_error;

  assign cmd_x_9_wd = reg_wdata[31:0];
  assign cmd_y_0_we = addr_hit[16] & reg_we & !reg_error;

  assign cmd_y_0_wd = reg_wdata[31:0];
  assign cmd_y_1_we = addr_hit[17] & reg_we & !reg_error;

  assign cmd_y_1_wd = reg_wdata[31:0];
  assign cmd_y_2_we = addr_hit[18] & reg_we & !reg_error;

  assign cmd_y_2_wd = reg_wdata[31:0];
  assign cmd_y_3_we = addr_hit[19] & reg_we & !reg_error;

  assign cmd_y_3_wd = reg_wdata[31:0];
  assign cmd_y_4_we = addr_hit[20] & reg_we & !reg_error;

  assign cmd_y_4_wd = reg_wdata[31:0];
  assign cmd_y_5_we = addr_hit[21] & reg_we & !reg_error;

  assign cmd_y_5_wd = reg_wdata[31:0];
  assign cmd_y_6_we = addr_hit[22] & reg_we & !reg_error;

  assign cmd_y_6_wd = reg_wdata[31:0];
  assign cmd_y_7_we = addr_hit[23] & reg_we & !reg_error;

  assign cmd_y_7_wd = reg_wdata[31:0];
  assign cmd_y_8_we = addr_hit[24] & reg_we & !reg_error;

  assign cmd_y_8_wd = reg_wdata[31:0];
  assign cmd_y_9_we = addr_hit[25] & reg_we & !reg_error;

  assign cmd_y_9_wd = reg_wdata[31:0];
  assign cmd_start_we = addr_hit[26] & reg_we & !reg_error;

  assign cmd_start_wd = reg_wdata[0];
  assign status_job_id_re = addr_hit[27] & reg_re & !reg_error;
  assign status_iter_0_re = addr_hit[28] & reg_re & !reg_error;
  assign status_iter_1_re = addr_hit[29] & reg_re & !reg_error;
  assign status_x_0_re = addr_hit[30] & reg_re & !reg_error;
  assign status_x_1_re = addr_hit[31] & reg_re & !reg_error;
  assign status_x_2_re = addr_hit[32] & reg_re & !reg_error;
  assign status_x_3_re = addr_hit[33] & reg_re & !reg_error;
  assign status_x_4_re = addr_hit[34] & reg_re & !reg_error;
  assign status_x_5_re = addr_hit[35] & reg_re & !reg_error;
  assign status_x_6_re = addr_hit[36] & reg_re & !reg_error;
  assign status_x_7_re = addr_hit[37] & reg_re & !reg_error;
  assign status_x_8_re = addr_hit[38] & reg_re & !reg_error;
  assign status_x_9_re = addr_hit[39] & reg_re & !reg_error;
  assign status_y_0_re = addr_hit[40] & reg_re & !reg_error;
  assign status_y_1_re = addr_hit[41] & reg_re & !reg_error;
  assign status_y_2_re = addr_hit[42] & reg_re & !reg_error;
  assign status_y_3_re = addr_hit[43] & reg_re & !reg_error;
  assign status_y_4_re = addr_hit[44] & reg_re & !reg_error;
  assign status_y_5_re = addr_hit[45] & reg_re & !reg_error;
  assign status_y_6_re = addr_hit[46] & reg_re & !reg_error;
  assign status_y_7_re = addr_hit[47] & reg_re & !reg_error;
  assign status_y_8_re = addr_hit[48] & reg_re & !reg_error;
  assign status_y_9_re = addr_hit[49] & reg_re & !reg_error;
  assign status_end_re = addr_hit[50] & reg_re & !reg_error;
  assign rw_we = addr_hit[51] & reg_we & !reg_error;

  assign rw_wd = reg_wdata[31:0];
  assign end_of_range_we = addr_hit[52] & reg_we & !reg_error;

  assign end_of_range_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    unique if (addr_hit[0]) begin
        reg_rdata_next = '0;
        reg_rdata_next[0] = control_clk_enable_qs;
        reg_rdata_next[4] = control_reset_qs;
    end else if (addr_hit[1]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_job_id_qs;
    end else if (addr_hit[2]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_iter_count_0_qs;
    end else if (addr_hit[3]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_iter_count_1_qs;
    end else if (addr_hit[4]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_start_iter_0_qs;
    end else if (addr_hit[5]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_start_iter_1_qs;
    end else if (addr_hit[6]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_x_0_qs;
    end else if (addr_hit[7]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_x_1_qs;
    end else if (addr_hit[8]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_x_2_qs;
    end else if (addr_hit[9]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_x_3_qs;
    end else if (addr_hit[10]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_x_4_qs;
    end else if (addr_hit[11]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_x_5_qs;
    end else if (addr_hit[12]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_x_6_qs;
    end else if (addr_hit[13]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_x_7_qs;
    end else if (addr_hit[14]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_x_8_qs;
    end else if (addr_hit[15]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_x_9_qs;
    end else if (addr_hit[16]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_y_0_qs;
    end else if (addr_hit[17]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_y_1_qs;
    end else if (addr_hit[18]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_y_2_qs;
    end else if (addr_hit[19]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_y_3_qs;
    end else if (addr_hit[20]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_y_4_qs;
    end else if (addr_hit[21]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_y_5_qs;
    end else if (addr_hit[22]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_y_6_qs;
    end else if (addr_hit[23]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_y_7_qs;
    end else if (addr_hit[24]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_y_8_qs;
    end else if (addr_hit[25]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = cmd_y_9_qs;
    end else if (addr_hit[26]) begin
        reg_rdata_next = '0;
        reg_rdata_next[0] = '0;
    end else if (addr_hit[27]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_job_id_qs;
    end else if (addr_hit[28]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_iter_0_qs;
    end else if (addr_hit[29]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_iter_1_qs;
    end else if (addr_hit[30]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_x_0_qs;
    end else if (addr_hit[31]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_x_1_qs;
    end else if (addr_hit[32]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_x_2_qs;
    end else if (addr_hit[33]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_x_3_qs;
    end else if (addr_hit[34]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_x_4_qs;
    end else if (addr_hit[35]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_x_5_qs;
    end else if (addr_hit[36]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_x_6_qs;
    end else if (addr_hit[37]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_x_7_qs;
    end else if (addr_hit[38]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_x_8_qs;
    end else if (addr_hit[39]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_x_9_qs;
    end else if (addr_hit[40]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_y_0_qs;
    end else if (addr_hit[41]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_y_1_qs;
    end else if (addr_hit[42]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_y_2_qs;
    end else if (addr_hit[43]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_y_3_qs;
    end else if (addr_hit[44]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_y_4_qs;
    end else if (addr_hit[45]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_y_5_qs;
    end else if (addr_hit[46]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_y_6_qs;
    end else if (addr_hit[47]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_y_7_qs;
    end else if (addr_hit[48]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_y_8_qs;
    end else if (addr_hit[49]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = status_y_9_qs;
    end else if (addr_hit[50]) begin
        reg_rdata_next = '0;
        reg_rdata_next[0] = status_end_qs;
    end else if (addr_hit[51]) begin
        reg_rdata_next = '0;
        reg_rdata_next[31:0] = rw_qs;
    end else if (addr_hit[52]) begin
        reg_rdata_next = '0;
        reg_rdata_next[0] = '0;
    end else begin
        reg_rdata_next = '1;
    end
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

endmodule
